// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id String @id @default(uuid())
  year Int
  title String
  code String
  startMonth String
  endMonth String
  isCurrent Boolean @default(false)
  students Student[]
  semesterRegistrations SemesterRegistration[]
  studentEnrolledCourses StudentEnrolledCourse[]
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  studentSemesterPayments StudentSemesterPayment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("academic_semesters")
}

model AcademicFaculty {
  id String @id @default(uuid())
  title String
  academicDepartments AcademicDepartment[]
  students Student[]
  faculties Faculty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_faculty")
}


model AcademicDepartment {
  id String @id @default(uuid())
  title String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  students Student[]
  faculties Faculty[]
  offeredCourses OfferedCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_departments")
}


model Student {
  id String @id @default(uuid())
  studentId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String @unique
  contactNo String @unique
  gender String
  bloodGroup String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  studentSemesterRegistrations StudentSemesterRegistration []
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentEnrolledCourses StudentEnrolledCourse[]
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  studentSemesterPayments StudentSemesterPayment[]
  studentAcademicInfos StudentAcademicInfo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("students")
}

model Faculty {
  id String @id @default(uuid())
  facultyId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String @unique
  contactNo String @unique
  gender String
  bloodGroup String
  designation String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  courses CourseFaculty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("faculties")
}

model Building {
  id String @id @default(uuid())
  title String

  rooms Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("buildings")
}

 model Room {
  id String @id @default(uuid())
  roomNumber String
  floor String

  buildingId String
  building Building @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rooms")
}

model Course {
  id String @id @default(uuid())
  title String
  code String
  credits Int @default(0)
  preRequisite CourseToPrerequisite[] @relation("CourseToPrerequisite")
  preRequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")

  faculties CourseFaculty[]
  offeredCourses OfferedCourse[]
   studentEnrolledCourses StudentEnrolledCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

model CourseToPrerequisite {
  courseId String
  prerequisiteId String
  @@id([courseId, prerequisiteId])

  course Course @relation(fields: [courseId], references: [id], name: "CourseToPrerequisite")
  prerequisite Course @relation(fields: [prerequisiteId], references: [id], name: "PrerequisiteToCourse")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_to_prerequisites")
}

model CourseFaculty {
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  
  facultyId String
  faculty Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])

  @@map("course_faculties")
}

model SemesterRegistration {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  status SemesterRegistrationStatus? @default(UPCOMING)
  minCredit Int @default(0)
  maxCredit Int @default(0)
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  offeredCourses OfferedCourse[]
  offeredCourseSections OfferedCourseSection[]
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  studentSemesterRegistrations StudentSemesterRegistration []
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("semester_registrations")

}

model OfferedCourse {
  id String @id @default(uuid())
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  academicDepartmentId String
  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseSections OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offered_courses")
}

model OfferedCourseSection {
  id String @id @default(uuid())
  title String
  maxCapacity Int
  currentlyEnrolledStudent Int @default(0)
  
  offeredCourseId String
  offeredCourse OfferedCourse @relation(fields: [offeredCourseId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offered_course_section")
}

model OfferedCourseClassSchedule {
  id String @id @default(uuid())
  startTime String
  endTime String
  dayOfWeek WeekDays @default(STAURDAY)
  offeredCourseSectionId String
  offeredCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId String
  room Room @relation(fields: [roomId], references: [id])
  facultyId String
  faculty Faculty @relation(fields: [facultyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("offered_course_class_schedule")
}

model StudentSemesterRegistration {
  id String @id @default(uuid())
  isConfirmed Boolean? @default(false)
  totalCreditsTaken Int? @default(0)
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_semester_registrations")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  offeredCourseId String
  offeredCourse OfferedCourse @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_courses")
}

model StudentEnrolledCourse {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  courseId String
  course Course @relation(fields: [courseId], references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  grade String?
  point Float @default(0)
  totalMarks Int? @default(0)
  status StudentEnrolledCourseStatus? @default(ONGOING)
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_enrolled_courses")
}

model StudentEnrolledCourseMark {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  studentEnrolledCourseId String
  studentEnrolledCourse StudentEnrolledCourse @relation(fields: [studentEnrolledCourseId], references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  grade String?
  marks Int?
  examType ExamType? @default(MIDTERM)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_enrolled_course_marks")
}

model StudentSemesterPayment {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  academicSemesterId String
  academicSemester AcademicSemester @relation(fields: [academicSemesterId], references: [id])
  fullPaymentAmount Int? @default(0)
  partialPaymentAmount Int? @default(0)
  totalDueAmount Int? @default(0)
  totalPaidAmount Int? @default(0)
  paymentStatus PaymentStatus? @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_semester_payments")
}

model StudentAcademicInfo {
  id String @id @default(uuid())
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  totalCompletedCredit Int? @default(0)
  cgpa Float? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_academic_infos")
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum WeekDays {
  STAURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
} 

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum ExamType {
  MIDTERM
  FINAL
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}